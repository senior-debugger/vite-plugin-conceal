{"version":3,"file":"vite-plugin-conceal.umd.js","sources":["../node_modules/base64-js/index.js","../node_modules/ieee754/index.js","../node_modules/buffer/index.js","../src/core/encode.ts","../src/utils/object.ts","../src/core/decode.ts"],"sourcesContent":["'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","import type { Plugin } from 'vite';\nimport { Buffer } from 'buffer';\n\nfunction plugin(): Plugin {\n  return {\n    name: 'vite-plugin-conceal',\n\n    transform(code, id) {\n      if (!/\\\\.conceal\\\\.(js|ts)x?$/.test(id)) {\n        return;\n      }\n\n      try {\n        let base64data: any;\n        eval(code);\n\n        if (!base64data || !Array.isArray(base64data)) {\n          return null;\n        }\n\n        const encoded = base64data.map((obj: any) => {\n          const encodedObj: Record<string, string> = {};\n\n          for (const key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n              const jsonString = JSON.stringify(obj[key]);\n              encodedObj[key] = Buffer.from(jsonString).toString('base64');\n            }\n          }\n\n          return encodedObj;\n        });\n\n        const transformedCode = `export default ${JSON.stringify(encoded)};`;\n\n        return {\n          code: transformedCode,\n          map: null\n        };\n      } catch (e) {\n        this.error(`Error in vite-plugin-conceal: ${e}`);\n      }\n\n      return null;\n    }\n  };\n}\n\nexport default plugin;\n","export const parseObject = (value: string) => {\n  try {\n    return JSON.parse(value);\n  } catch (error) {\n    console.error(error);\n    return value;\n  }\n};\n","import { Buffer } from 'buffer';\n\nimport { parseObject } from '@/utils/object';\n\n/**\n * Decode Base64-encoded source back into JavaScript objects.\n */\nexport default function decode(source: any[]): any[] {\n  if (!Array.isArray(source)) return source;\n\n  const decoded = source.map((item) => {\n    const obj: Record<string, any> = {};\n\n    for (const key in item) {\n      if (Object.prototype.hasOwnProperty.call(item, key)) {\n        try {\n          const value = Buffer.from(item[key], 'base64').toString('utf-8');\n          obj[key] = parseObject(value);\n        } catch {\n          obj[key] = item[key];\n        }\n      }\n    }\n\n    return obj;\n  });\n\n  return decoded;\n}\n"],"names":["base64Js","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","i","arr","Arr","_byteLength","curByte","len","revLookup","charCodeAt","fromByteArray","uint8","length","extraBytes","parts","maxChunkLength","len2","push","encodeChunk","lookup","join","Uint8Array","Array","code","Error","indexOf","tripletToBase64","num","start","end","output","ieee754","read","buffer","offset","isLE","mLen","nBytes","e","m","eLen","eMax","eBias","nBits","d","s","NaN","Infinity","Math","pow","write","value","c","rt","abs","isNaN","floor","log","LN2","base64","require$$0","require$$1","customInspectSymbol","Symbol","exports","Buffer","SlowBuffer","alloc","INSPECT_MAX_BYTES","K_MAX_LENGTH","createBuffer","RangeError","buf","Object","setPrototypeOf","prototype","arg","encodingOrOffset","TypeError","allocUnsafe","from","string","encoding","isEncoding","actual","slice","fromString","ArrayBuffer","isView","arrayView","isInstance","copy","fromArrayBuffer","byteOffset","fromArrayLike","fromArrayView","SharedArrayBuffer","valueOf","b","obj","isBuffer","checked","numberIsNaN","type","isArray","data","fromObject","toPrimitive","assertSize","size","array","toString","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","this","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","n","bidirectionalIndexOf","val","dir","arrayIndexOf","call","lastIndexOf","indexSize","arrLength","valLength","String","readUInt16BE","foundIndex","found","j","hexWrite","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","kMaxLength","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","console","error","defineProperty","enumerable","get","poolSize","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","set","swap16","swap32","swap64","toLocaleString","equals","inspect","max","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","hexSliceLookupTable","bytes","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","BigInt","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","subarray","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","errors","E","sym","getMessage","Base","constructor","super","writable","configurable","name","stack","message","addNumericalSeparator","range","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","input","msg","received","isInteger","INVALID_BASE64_RE","leadSurrogate","split","base64clean","src","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","plugin","transform","id","test","base64data","eval","encoded","map","encodedObj","key","hasOwnProperty","jsonString","JSON","stringify","transformedCode","parseObject","parse","decode","source","item"],"mappings":"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","x_google_ignoreList":[0,1,2]}